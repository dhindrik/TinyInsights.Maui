@page "/analytics/users"

@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
<div>
    <RadzenStack Gap="20">
        <RadzenRow JustifyContent="JustifyContent.End">
            <GlobalFilters />
        </RadzenRow>
        <RadzenCard>
            <RadzenStack>
                <h2>Unique users per day</h2>
                @if (isLoadingUsersPerDayViews)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {
                    <RadzenChart>
                        <RadzenLegend Visible="false" />
                        <RadzenLineSeries Data="@usersPerDay" CategoryProperty="Date" ValueProperty="Count">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
                    </RadzenChart>
                }
            </RadzenStack>
        </RadzenCard>

        <RadzenCard>
            <RadzenStack>
                <h2>Unique user sessions per day</h2>
                @if (isLoadingSessionsPerDay)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {


                    <RadzenChart>
                        <RadzenLegend Visible="false" />
                        <RadzenLineSeries Data="@sessionsPerDay" CategoryProperty="Date" ValueProperty="Count">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
                    </RadzenChart>
                }
            </RadzenStack>
        </RadzenCard>

        <div class="wrapbox">
            <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Users per country</h2>

                    @if (isLoadingCountryList)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenTabs TabPosition="TabPosition.TopRight">
                            <Tabs>
                                    <RadzenTabsItem Icon="list">
                                          <RadzenDataGrid Data="usersPerCountry">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Country" Property="@nameof(CountPerKey.Key)" />
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                            </Columns>
                        </RadzenDataGrid>
                        </RadzenTabsItem>
                                <RadzenTabsItem Icon="pie_chart">
                                        <RadzenChart>
                                            <RadzenPieSeries Data="@usersPerCountry" Title="Users" CategoryProperty="Key" ValueProperty="Count">
                                                <RadzenSeriesDataLabels Visible="true" />
                                            </RadzenPieSeries>
                                        </RadzenChart>
                                </RadzenTabsItem>

                            </Tabs>
                        </RadzenTabs>
                      
                    }
                </RadzenStack>
            </RadzenCard>
            </div>
            <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Users per language</h2>

                    @if (isLoadingUsersPerLanguage)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                            <RadzenTabs TabPosition="TabPosition.TopRight">
                                <Tabs>
                                    <RadzenTabsItem Icon="list">
                                        <RadzenDataGrid Data="usersPerLanguage">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Language" Property="@nameof(CountPerKey.Key)" />
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Icon="pie_chart">
                                        <RadzenChart>
                                            <RadzenPieSeries Data="@usersPerLanguage" Title="Users" CategoryProperty="Key" ValueProperty="Count">
                                                <RadzenSeriesDataLabels Visible="true" />
                                            </RadzenPieSeries>
                                        </RadzenChart>
                                    </RadzenTabsItem>

                                </Tabs>
                            </RadzenTabs>                      
                    }
                </RadzenStack>
            </RadzenCard>
            </div>
        </div>
        
        <div class="wrapbox">
            <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Users per app version</h2>

                    @if (isLoadingAppVersions)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                            <RadzenTabs TabPosition="TabPosition.TopRight">
                                <Tabs>
                                    <RadzenTabsItem Icon="list">
                                        <RadzenDataGrid Data="usersPerAppVersion">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Language" Property="@nameof(CountPerKey.Key)" />
                                                <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Icon="pie_chart">
                                        <RadzenChart>
                                            <RadzenPieSeries Data="@usersPerAppVersion" Title="Users" CategoryProperty="Key" ValueProperty="Count">
                                                <RadzenSeriesDataLabels Visible="true" />
                                            </RadzenPieSeries>
                                        </RadzenChart>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>                         
                    }
                </RadzenStack>
            </RadzenCard>
            </div>
        </div>
    </RadzenStack>
</div>


@code {
    [CascadingParameter]
    public GlobalFilter GlobalFilter { get; set; }

    private bool isLoadingUsersPerDayViews = true, isLoadingCountryList = true, isLoadingUsersPerLanguage, isLoadingSessionsPerDay, isLoadingAppVersions;
    private List<CountPerDay> usersPerDay = new();
    private List<CountPerDay> sessionsPerDay = new();
    private List<CountPerKey> usersPerCountry = new();
    private List<CountPerKey> usersPerLanguage = new();
    private List<CountPerKey> usersPerAppVersion = new();
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await Task.WhenAll(LoadUsersPerDay(), LoadCountries(), LoadLanguageList(), LoadSessionsPerDay(), LoadAppVersions());
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task LoadUsersPerDay()
    {
        isLoadingUsersPerDayViews = true;

        var result = await Service.GetUsersPerDay(GlobalFilter);

        var date = DateOnly.FromDateTime(DateTime.Now).AddDays(-GlobalFilter.NumberOfDays);
        var days = new List<CountPerDay>();

        for (int i = 1; i <= GlobalFilter.NumberOfDays; i++)
        {
            var currentDate = date.AddDays(i);
            var day = result.SingleOrDefault(x => x.Date == currentDate);

            var count = day?.Count ?? 0;

            days.Add(new CountPerDay(currentDate, count));
        }

        usersPerDay = days;
        isLoadingUsersPerDayViews = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadSessionsPerDay()
    {
        isLoadingSessionsPerDay = true;

        var result = await Service.GetSessionsPerDay(GlobalFilter);

        var date = DateOnly.FromDateTime(DateTime.Now).AddDays(-GlobalFilter.NumberOfDays);
        var days = new List<CountPerDay>();

        for (int i = 1; i <= GlobalFilter.NumberOfDays; i++)
        {
            var currentDate = date.AddDays(i);
            var day = result.SingleOrDefault(x => x.Date == currentDate);

            var count = day?.Count ?? 0;

            days.Add(new CountPerDay(currentDate, count));
        }

        sessionsPerDay = days;
        isLoadingSessionsPerDay = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadCountries()
    {
        isLoadingCountryList = true;

        var result = await Service.GetUserPerCountry(GlobalFilter);

        usersPerCountry = result.OrderByDescending(x => x.Count).ToList();

        isLoadingCountryList = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadLanguageList()
    {
        isLoadingUsersPerLanguage = true;

        var result = await Service.GetUserPerLanguage(GlobalFilter);

        usersPerLanguage = result.OrderByDescending(x => x.Count).ToList();

        isLoadingUsersPerLanguage = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAppVersions()
    {
        isLoadingAppVersions = true;

        var result = await Service.GetUsersPerAppVersion(GlobalFilter);

        usersPerAppVersion = result.OrderByDescending(x => x.Count).ToList();

        isLoadingAppVersions = false;

        await InvokeAsync(StateHasChanged);
    }


    private record DayFilterItem(string Text, int Value);
}