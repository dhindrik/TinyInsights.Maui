@page "/"

@inherits TinyInsightsComponentBase

@using System.ComponentModel.DataAnnotations
@using TinyInsights.Web.Services

@inject IInsightsService Service
@inject DialogService DialogService

<RadzenCard>
    <EditForm Model="_model" OnValidSubmit="Open">
        <RadzenStack>
            <h2>Login</h2>
            <RadzenText Text="Application id"/>
            <RadzenTextBox @bind-Value="_model.ApplicationId" Placeholder="Enter your application id"/>
            <RadzenText Text="API token"></RadzenText>
            <RadzenPassword @bind-Value="_model.ApiKey" Placeholder="Enter your API token"/>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Open"/>
        </RadzenStack>
    </EditForm>
</RadzenCard>
<RadzenCard>
    <h2>Get started</h2>
    To use this application you need to install and configurate the Nuget "TinyInsights" into your app. 
    Read more here, <a href="https://github.com/dhindrik/TinyInsights.Maui">https://github.com/dhindrik/TinyInsights.Maui</a>
    <h3>Get the Application id and API Token</h3>
    <ul>
        <li>Go to the Azure portal</li>
        <li>Navigate to your Application Insights resource</li>
        <li>Click on the API Access menu item</li>
        <li>Copy the Application id and create a new API token</li>    
    </ul>
</RadzenCard>

@code{
    [CascadingParameter] public EventCallback<bool> IsLoggedInChanged { get; set; }
    private readonly AuthModel _model = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!OperatingSystem.IsBrowser())
        {
            NavigationManager.NavigateTo("/login");   
        }
    }

    public async Task Open()
    {
        try
        {
            if (_model.ApplicationId is not null && _model.ApiKey is not null)
            {
                var result = await Service.AddAndValidateApiKey(_model.ApplicationId, _model.ApiKey);

                if (result)
                {
                    await IsLoggedInChanged.InvokeAsync(true);

                    NavigationManager.NavigateTo("/dashboard");
                    return;
                }

                await DialogService.Alert("Authentication failed", "Error");
            }
        }
        catch (Exception ex)
        {
            await DialogService.Alert(ex.Message, "Error");
        }
    }

    public class AuthModel
    {
        [Required] public string? ApplicationId { get; set; }
        [Required] public string? ApiKey { get; set; }
    }

}