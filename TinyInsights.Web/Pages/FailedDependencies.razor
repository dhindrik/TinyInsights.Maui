@page "/diagnostics/dependencies/failed/{Method}/{*Key}"

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
@inject DialogService DialogService

<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <a href="/diagnostics/dependencies" title="Back">
            <RadzenIcon Icon="arrow_back" />
        </a>
        <GlobalFilters />
    </RadzenRow>

    <RadzenCard>

        <h2>Summary</h2>

        @if (isLoading)
        {
            <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else
        {
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="20px">
                <LabelValuePair Key="Count" Value="@data.Count.ToString()" />
                <LabelValuePair Key="Affected users" Value="@data.AffectedUsersCount.ToString()" />
                <LabelValuePair Key="Affected app versions" Value="@(string.Join(", ", data.AffectedAppVersions))" />
                <LabelValuePair Key="Affected operating systems"
                Value="@(string.Join(", ", data.AffectedOperatingSystems))" />
            </RadzenStack>
        }

    </RadzenCard>
    <RadzenCard>
        <h2>Failed dependencies per day</h2>
        @if (isLoading)
        {
            <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else if(failedDependenciesPerDays is not null)
        {
            <RadzenChart>
                <RadzenLegend Visible="false" />
                <RadzenLineSeries Data="@failedDependenciesPerDays" CategoryProperty="Date" ValueProperty="Count">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels />
                </RadzenLineSeries>
                <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
            </RadzenChart>
        }
    </RadzenCard>
    <RadzenCard>
        <h2>Failed dependencies</h2>
        @if (isLoading)
        {
            <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else
        {
            <RadzenDataGrid Data="data.Items" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                <Columns>
                    <RadzenDataGridColumn TItem="FailedDependencyItem" Title="Timestamp" Width="200px"
                    Property="@nameof(FailedDependencyItem.Timestamp)" />
                    <RadzenDataGridColumn TItem="FailedDependencyItem" Title="Method" Width="200px"
                    Property="@nameof(FailedDependencyItem.Method)" />
                    <RadzenDataGridColumn TItem="FailedDependencyItem" Title="Result code" Width="100px"
                    Property="@nameof(FailedDependencyItem.ResultCode)" />

                    <RadzenDataGridColumn TItem="FailedDependencyItem" Title="Url"
                    Property="@nameof(FailedDependencyItem.FullUrl)" />
                    <RadzenDataGridColumn TItem="FailedDependencyItem" Title="Device OS" Width="100px"
                    Property="@nameof(FailedDependencyItem.ClientOs)" />
                    <RadzenDataGridColumn TItem="FailedDependencyItem" Width="100px">
                        <Template>
                            <RadzenButton Icon="description" Click="@(async (args) => await ShowAllProperties(context))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </RadzenCard>
</RadzenStack>

@code {
    [Parameter]
    public required string Key { get; set; }
    [Parameter]
    public required string Method { get; set; }

    private Services.Models.FailedDependencies data = new();
    private List<Services.Models.CountPerDay>? failedDependenciesPerDays;

    private bool isLoading = true;

    [CascadingParameter]
    public required GlobalFilter GlobalFilter { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            data = await Service.GetFailedDependencies(Key, Method, GlobalFilter);
            data.Items = data.Items.OrderByDescending(x => x.Timestamp).ToList();
            failedDependenciesPerDays = data.Items.GroupBy(x => x.Timestamp.Date).Select(x => new Services.Models.CountPerDay(DateOnly.FromDateTime(x.Key), x.Count())).OrderBy(x => x.Date).ToList();

            isLoading = false;
        }
        catch(Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task ShowAllProperties(ErrorItem item)
    {
        await DialogService.OpenAsync<AllProperties>($"All properties",
        new Dictionary<string, object>() { { "Properties", item.Data } },
        new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }
}
