@page "/analytics/devices"

@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.End">
        <GlobalFilters />
    </RadzenRow>
    <div class="wrapbox">
        <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Operating systems</h2>

                    @if (isLoadingOperatingSystems)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenChart>
                            <RadzenPieSeries Data="@operatingSystemUsers" Title="Users" CategoryProperty="Key" ValueProperty="Percent">
                                <RadzenSeriesDataLabels Visible="true" />
                            </RadzenPieSeries>
                        </RadzenChart>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
        <div>
            <RadzenCard>
                <RadzenStack>
                    <h2>Device types</h2>
                    @if (isLoadingIdiom)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenChart>
                            <RadzenPieSeries Data="@idiomUsers" Title="Users" CategoryProperty="Key" ValueProperty="Percent">
                                <RadzenSeriesDataLabels Visible="true" />
                            </RadzenPieSeries>
                        </RadzenChart>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
        <div>
            <RadzenCard>
                <RadzenStack>
                    <h2>Manufactures</h2>
                    @if (isLoadingManufactures)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenChart>
                            <RadzenPieSeries Data="@manufactures" Title="Users" CategoryProperty="Key" ValueProperty="Percent">
                                <RadzenSeriesDataLabels Visible="true" />
                            </RadzenPieSeries>
                        </RadzenChart>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
    </div>
</RadzenStack>
@code {
    [CascadingParameter]
    public GlobalFilter GlobalFilter { get; set; }

    private bool isLoadingIdiom = true, isLoadingOperatingSystems = true, isLoadingManufactures = true;

    private List<PercentPerKey> idiomUsers = new();
    private List<PercentPerKey> operatingSystemUsers = new();
    private List<PercentPerKey> manufactures = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            await Task.WhenAll(LoadUserIdioms(), LoadUserOperatingSystems(), LoadManufactures());
        }
        catch(Exception ex)
        {
           HandleException(ex);
        }
    }

    private async Task LoadUserIdioms()
    {
        isLoadingIdiom = true;
        var result = await Service.GetUsersPerIdiom(GlobalFilter);
        var total = result.Sum(x => x.Count);
        idiomUsers = result.Select(x => new PercentPerKey(x.Key, Math.Round((x.Count / (double)total * 100),0))).ToList();
        isLoadingIdiom = false;

        StateHasChanged();
    }

    private async Task LoadUserOperatingSystems()
    {
        isLoadingOperatingSystems = true;
        var result = await Service.GetUsersPerOperatingSystem(GlobalFilter);
        var total = result.Sum(x => x.Count);
        operatingSystemUsers = result.Select(x => new PercentPerKey(x.Key, Math.Round((x.Count / (double)total * 100), 0))).ToList();
        isLoadingOperatingSystems = false;

        StateHasChanged();
    }

    private async Task LoadManufactures()
    {
        isLoadingManufactures = true;
        var result = await Service.GetUserPerManufacturer(GlobalFilter);
        var total = result.Sum(x => x.Count);
        manufactures = result.Select(x => new PercentPerKey(x.Key, Math.Round((x.Count / (double)total * 100), 0))).ToList();
        isLoadingManufactures = false;

        StateHasChanged();
    }
}