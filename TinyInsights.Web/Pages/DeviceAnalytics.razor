@page "/analytics/devices"

@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.End">
        <GlobalFilters />
    </RadzenRow>
    <div class="wrapbox">
        <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Operating systems</h2>

                    @if (isLoadingOperatingSystems)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenTabs TabPosition="TabPosition.TopRight">
                            <Tabs>
                                <RadzenTabsItem Icon="list">
                                    <RadzenDataGrid Data="operatingSystemUsers">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Country" Property="@nameof(CountPerKey.Key)" />
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                <RadzenTabsItem Icon="pie_chart">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@operatingSystemUsers" Title="Users" CategoryProperty="@nameof(CountPerKey.Key)" ValueProperty="@nameof(CountPerKey.Count)">
                                            <RadzenSeriesDataLabels Visible="true" />
                                        </RadzenPieSeries>
                                    </RadzenChart>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
        <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Device types</h2>
                    @if (isLoadingIdiom)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenTabs TabPosition="TabPosition.TopRight">
                            <Tabs>
                                <RadzenTabsItem Icon="list">
                                    <RadzenDataGrid Data="idiomUsers">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Country" Property="@nameof(CountPerKey.Key)" />
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                <RadzenTabsItem Icon="pie_chart">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@idiomUsers" Title="Users" CategoryProperty="@nameof(CountPerKey.Key)" ValueProperty="@nameof(CountPerKey.Count)">
                                            <RadzenSeriesDataLabels Visible="true" />
                                        </RadzenPieSeries>
                                    </RadzenChart>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
        <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Manufactures</h2>
                    @if (isLoadingManufactures)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenTabs TabPosition="TabPosition.TopRight">
                            <Tabs>
                                <RadzenTabsItem Icon="list">
                                    <RadzenDataGrid Data="manufactures">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Country" Property="@nameof(CountPerKey.Key)" />
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                <RadzenTabsItem Icon="pie_chart">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@manufactures" Title="Users" CategoryProperty="@nameof(CountPerKey.Key)" ValueProperty="@nameof(CountPerKey.Count)">
                                            <RadzenSeriesDataLabels Visible="true" />
                                        </RadzenPieSeries>
                                    </RadzenChart>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>
        <div class="wrapitem">
            <RadzenCard>
                <RadzenStack>
                    <h2>Operating system versions</h2>
                    @if (isLoadingOperatingSystemVersions)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else
                    {
                        <RadzenTabs TabPosition="TabPosition.TopRight">
                            <Tabs>
                                <RadzenTabsItem Icon="list">
                                    <RadzenDataGrid Data="operatingSystemVersions">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Country" Property="@nameof(CountPerKey.Key)" />
                                            <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                <RadzenTabsItem Icon="pie_chart">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@operatingSystemVersions" Title="Users" CategoryProperty="@nameof(CountPerKey.Key)" ValueProperty="@nameof(CountPerKey.Count)">
                                            <RadzenSeriesDataLabels Visible="true" />
                                        </RadzenPieSeries>
                                    </RadzenChart>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    }
                </RadzenStack>
            </RadzenCard>
        </div>

    </div>

</RadzenStack>
@code {
    [CascadingParameter]
    public GlobalFilter GlobalFilter { get; set; }

    private bool isLoadingIdiom = true, isLoadingOperatingSystems = true, isLoadingManufactures = true, isLoadingOperatingSystemVersions = true;

    private List<CountPerKey> idiomUsers = new();
    private List<CountPerKey> operatingSystemUsers = new();
    private List<CountPerKey> manufactures = new();
    private List<CountPerKey> operatingSystemVersions = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            await Task.WhenAll(LoadUserIdioms(), LoadUserOperatingSystems(), LoadManufactures(), LoadOperatingSystemVersions());
        }
        catch(Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task LoadUserIdioms()
    {
        isLoadingIdiom = true;
        idiomUsers = await Service.GetUsersPerIdiom(GlobalFilter);
        
        isLoadingIdiom = false;

        StateHasChanged();
    }

    private async Task LoadUserOperatingSystems()
    {
        isLoadingOperatingSystems = true;
        operatingSystemUsers = await Service.GetUsersPerOperatingSystem(GlobalFilter);
       
        isLoadingOperatingSystems = false;

        StateHasChanged();
    }

    private async Task LoadManufactures()
    {
        isLoadingManufactures = true;
        manufactures = await Service.GetUserPerManufacturer(GlobalFilter);
       
        isLoadingManufactures = false;

        StateHasChanged();  
    }

    private async Task LoadOperatingSystemVersions()
    {
        isLoadingOperatingSystemVersions = true;

        var result = await Service.GetUsersPerOperatingSystemVersion(GlobalFilter);
        operatingSystemVersions = result.OrderByDescending(x => x.Count).ToList();

        isLoadingOperatingSystemVersions = false;

        StateHasChanged();
    }
}