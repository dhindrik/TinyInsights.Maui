@page "/diagnostics/dependencies"

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
@inject TooltipService tooltipService

<div>
    <RadzenStack Gap="20">
        <RadzenRow JustifyContent="JustifyContent.End">
            <GlobalFilters />
        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Start">
            <Badge IsBadgeVisible="@(selectedCodes.Any(x => x != AllResultCodes))">
                <RadzenButton Icon="filter_alt" Click="@(() => showFailedFilter = !showFailedFilter)" MouseEnter="ShowFilterTooltip"></RadzenButton>
            </Badge>
        </RadzenRow>

        @if (showFailedFilter)
        {
            <RadzenCard>
                @if (failedDependenciesCodes.Count > 0)
                {
                    <h2>Faild dependencies filter</h2>
                    <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center">
                        <RadzenDropDown @bind-Value="selectedCodes" @bind-Value:after="SelectedCodesChanged" Data="failedDependenciesCodes" Multiple="true" Chips="true" />
                        <RadzenCheckBox Name="Exclude400" @bind-Value="exclude400Errors" @bind-Value:after="Exclude400Changed" /><RadzenLabel Text="Exclude 400 errors" Component="Exclude400" />
                    </RadzenRow>
                }    
            </RadzenCard>
        }
        <RadzenCard>
            <RadzenStack>
                <h2>Failed dependencies per day</h2>
                @if (loadingFailedDependenciesPerDays)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {
                    <RadzenChart>
                        <RadzenLegend Visible="false" />
                        <RadzenLineSeries Data="@failedPerDays" CategoryProperty="Date" ValueProperty="Count">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
                    </RadzenChart>
                }
            </RadzenStack>
        </RadzenCard>

        <RadzenCard>
            <RadzenStack>
                <h2>Failed dependencies</h2>
                @if (loadingFailedDependencies)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {


                    <RadzenDataGrid Data="failedDependencies" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Dependency" Property="@nameof(DependencyCount.Key)" />
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Method" Property="@nameof(DependencyCount.Method)" Width="200px" />
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Count" Property="@nameof(DependencyCount.Count)"
                            Width="100px" />
                            <RadzenDataGridColumn TItem="DependencyCount" Width="100px" TextAlign="TextAlign.End">
                                <Template>
                                    <a href="@($"/diagnostics/dependencies/failed/{context.Method}/{context.Key}")">
                                        <RadzenIcon Icon="arrow_forward" />
                                    </a>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
            </RadzenStack>
        </RadzenCard>

        <RadzenCard>
            <RadzenStack>
                <h2>Top dependencies</h2>
                @if (loadingTopDependencies)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {
                    <RadzenDataGrid Data="topDependencies" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Dependency" Property="@nameof(DependencyCount.Key)" />
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Method" Property="@nameof(DependencyCount.Method)" Width="200px" />
                            <RadzenDataGridColumn TItem="DependencyCount" Title="Count" Property="@nameof(DependencyCount.Count)"
                            Width="100px" />
                        </Columns>
                    </RadzenDataGrid>
                }
            </RadzenStack>
        </RadzenCard>
        <RadzenCard>
            <RadzenStack>
                <h2>Dependency duration</h2>
                @if (loadingDependencyAvg)
                {
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {
                    <RadzenDataGrid Data="dependencyDurations" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="AvgPerKey" Title="Dependency" Property="@nameof(AvgPerKey.Key)" />
                            <RadzenDataGridColumn TItem="AvgPerKey" Title="Average duration (ms)"
                            Property="@nameof(AvgPerKey.Avg)" FormatString="{0:N0}" Width="200px" />
                        </Columns>
                    </RadzenDataGrid>
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</div>
@code {

    [CascadingParameter]
    public required GlobalFilter GlobalFilter { get; set; }

    private bool loadingTopDependencies = true, loadingDependencyAvg = true, loadingFailedDependencies = true,
    loadingFailedDependenciesPerDays = true;

    private List<DependencyCount> topDependencies = [], failedDependencies = [];
    private List<AvgPerKey> dependencyDurations = [];
    private List<CountPerDay> failedPerDays = [];

    private List<string> failedDependenciesCodes = [];

    private const string AllResultCodes = "All result codes";
    private List<string> selectedCodes = [AllResultCodes];
    private bool exclude400Errors;
    private bool showFailedFilter;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var topTask = LoadTopDependencies();
            var avgTask = LoadDependencyDuration();
            var failedTask = LoadFailedDependencies();
            var failedPerDaysTask = LoadFailedDependenciesPerDays();

            await Task.WhenAll(topTask, avgTask, failedTask, failedPerDaysTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task LoadTopDependencies()
    {
        loadingTopDependencies = true;

        var dependencies = await Service.GetTopDependencies(GlobalFilter);
        topDependencies = dependencies.OrderByDescending(x => x.Count).ToList();

        loadingTopDependencies = false;

        StateHasChanged();
    }

    private async Task LoadDependencyDuration()
    {
        loadingDependencyAvg = true;

        var dependencies = await Service.GetDependencyAvgDurations(GlobalFilter);
        dependencyDurations = dependencies.OrderByDescending(x => x.Avg).ToList();

        loadingDependencyAvg = false;

        StateHasChanged();
    }


    private async Task LoadFailedDependencies()
    {
        loadingFailedDependencies = true;

        failedDependenciesCodes = await Service.GetFailedDependenciesStatusCodes(GlobalFilter);

        var dependencies = await Service.GetFailedDependencies(GlobalFilter, GetCodesForFilter());
        failedDependencies = dependencies.OrderByDescending(x => x.Count).ToList();

        loadingFailedDependencies = false;

        StateHasChanged();
    }

    private async Task LoadFailedDependenciesPerDays()
    {
        loadingFailedDependenciesPerDays = true;

        var result = await Service.GetFailedDependenciesPerDay(GlobalFilter);

        var date = DateOnly.FromDateTime(DateTime.Now).AddDays(-GlobalFilter.NumberOfDays);
        var days = new List<CountPerDay>();

        for (int i = 0; i <= GlobalFilter.NumberOfDays; i++)
        {
            var currentDate = date.AddDays(i);
            var day = result.SingleOrDefault(x => x.Date == currentDate);

            var count = day?.Count ?? 0;

            days.Add(new CountPerDay(currentDate, count));
        }

        failedPerDays = days;

        loadingFailedDependenciesPerDays = false;

        StateHasChanged();
    }

    private Task Exclude400Changed()
    {
        if(exclude400Errors && failedDependenciesCodes.Any(x => x != AllResultCodes))
        {
            if (selectedCodes.Any(x => x != AllResultCodes))
            {
                selectedCodes.ForEach(x =>
                {
                    if (int.TryParse(x, out int code) && code >= 400 && code < 500)
                    {
                        selectedCodes.Remove(x);
                    }
                });
            }
            else
            {
                selectedCodes = failedDependenciesCodes.Where(x =>
                {
                    if (int.TryParse(x, out int code) && code >= 400 && code < 500)
                    {
                        return false;
                    }

                    return true;
                }).ToList();
            }
        }
        else if (!exclude400Errors && selectedCodes.Any())
        {
            failedDependenciesCodes.ForEach(x =>
            {
                if (int.TryParse(x, out int code) && code >= 400 && code < 500)
                {
                    selectedCodes.Add(x);
                }
            });
        }
        else
        {
            selectedCodes.Clear();
        }

        return SelectedCodesChanged();
    }

    private async Task SelectedCodesChanged()
    {
        try
        {
            if(selectedCodes.Count > 1)
            {
                selectedCodes.Remove(AllResultCodes);
            }

            if (selectedCodes.Count == failedDependenciesCodes.Count || selectedCodes.Count == 0)
            {
                selectedCodes.Clear();
                selectedCodes.Add(AllResultCodes);
            }

            var failedTask = LoadFailedDependencies();
            var failedPerDaysTask = LoadFailedDependenciesPerDays();

            await Task.WhenAll(failedTask, failedPerDaysTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private List<string>? GetCodesForFilter()
    {
        var filterCodes = selectedCodes.Where(x => x != AllResultCodes).ToList();

        return filterCodes.Count == 0 ? null : filterCodes;
    }

    private void ShowFilterTooltip(ElementReference elementReference) => tooltipService.Open(elementReference, showFailedFilter ? "<b>Hide filters</b>" : "<b>Show all filters</b>", new TooltipOptions() { Style = "background: #757575; color: white;" });
}