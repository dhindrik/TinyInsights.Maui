@page "/analytics/events"
@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.End">
        <GlobalFilters />
    </RadzenRow>
   
    <RadzenCard>
        <RadzenStack>
            <h2>Events</h2>

            @if (isLoadingList)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            }
            else
            {
            <RadzenDataGrid Data="events">
                <Columns>
                    <RadzenDataGridColumn TItem="CountPerKey" Title="Identifier" Property="@nameof(CountPerKey.Key)" />
                    <RadzenDataGridColumn TItem="CountPerKey" Title="Count" Property="@nameof(CountPerKey.Count)" Width="100px" />
                    <RadzenDataGridColumn TItem="CountPerKey" Width="100px" TextAlign="TextAlign.End">
                        <Template>
                            <a href="@($"/analytics/events/details/{context.Key}")">
                                <RadzenIcon Icon="arrow_forward"/>
                            </a>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    private bool isLoadingList = true;
    private List<CountPerKey> events = new();
    private CancellationTokenSource cts = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await LoadData(cts.Token);
    }

    private async Task LoadData(CancellationToken cancellationToken = default)
    {
        try
        {
            var listTask = LoadList(cancellationToken);

            await Task.WhenAll(listTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
    
    private async Task LoadList(CancellationToken cancellationToken = default)
    {
        isLoadingList = true;

        var result = await Service.GetEventsGrouped(GlobalFilter, cancellationToken);

        events = result.OrderByDescending(x => x.Count).ToList();
        
        isLoadingList = false;
        
        await InvokeAsync(StateHasChanged);
    }
    
    private record DayFilterItem(string Text, int Value);
}