@page "/query"
@using Blazored.LocalStorage

@inherits TinyInsightsComponentBase

@inject ILocalStorageService localStorage
@inject IInsightsService insightsService

<div>
    <RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
        <RadzenSidebar>
            <RadzenCard>
                <RadzenStack>
                    <h2>Predefined queries</h2>
                </RadzenStack>
            </RadzenCard>
        </RadzenSidebar>
    <RadzenBody>
        <RadzenCard>
            <RadzenStack>
                <h2>Custom query</h2>
                <span>Note, no global filter will apply when running this query!</span>
                <RadzenButton Text="Run" Icon="play_arrow" class="run_button" Click="@(async(args) => await RunQuery())" Disabled="isRunDisabled" />
                <StandaloneCodeEditor Id="monaco-query-editor" ConstructionOptions="EditorConstructionOptions" OnKeyUp="HandleKeyUp"  />

                @if(isLoading)
                    {
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }

                    @if (queryResult is not null && queryResult.Tables is not null)
                    {
                        foreach (var table in queryResult.Tables)
                        {
                            <RadzenDataGrid Data="@table.Rows" TItem="IReadOnlyList<object>" ShowPagingSummary="true" PageSize="20" AllowPaging="true" AllowSorting="true" class="rz-datagrid-table">
                                <Columns>
                                    @for (int i = 0; i < table.Columns.Count && i < 5; i++)
                                    {
                                        <RadzenDataGridColumn TItem="IReadOnlyList<object>" Property="@($"[{i}]")" Title="@table.Columns[i].Name">
                                            <Template Context="row">
                                                @row[i]
                                            </Template>
                                        </RadzenDataGridColumn>
                                    }
                                </Columns>
                            </RadzenDataGrid>
                        }
                    }
                </RadzenStack>
        </RadzenCard>
    </RadzenBody>
    <RadzenSidebar Style="width: 300px; grid-area: rz-right-sidebar">
        <RadzenCard>
            <RadzenStack>
                <h2>Query history</h2>
                @foreach(var item in history)
                {
                    <QueryItem Query="@item" RunClicked="@(async () => await RunHistoryQuery(item))" />
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenSidebar>
</RadzenLayout>
</div>

@code {
    private const string HistoryLocalStorageKey = "history";

    private StandaloneCodeEditor? editor;
    private bool isRunDisabled = true;
    private bool isLoading = false;

    private QueryResult? queryResult;


    private List<string> history = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        history = await GetHistory();

        if (editor is not null)
        {
            await editor.SetValue(string.Empty);
        }
    }

    private async Task RunQuery()
    {
        try
        {
            if (editor is not null)
            {
                var text = await editor.GetValue(false);

                isLoading = true;
                StateHasChanged();

                CancelCurrentOperation();

                var textToHistory = text;
                var parts = text.Split("|");

                if (parts is not null && !parts.Last().Contains("limit"))
                {
                    text = $"{text.Trim()} | limit 100";
                }

                queryResult = await insightsService.RunQuery(text, CancellationToken);

                await SetHistory(textToHistory);
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task HandleKeyUp()
    {
        if (editor is not null)
        {
            var text = await editor.GetValue(false);

            if(string.IsNullOrWhiteSpace(text))
            {
                isRunDisabled = true;
                return;
            }

            isRunDisabled = false;
        }
    }

    private async Task<List<string>> GetHistory()
    {
        var storedHistory = await localStorage.GetItemAsync<List<string>>(HistoryLocalStorageKey);

        return storedHistory ?? [];
    }

    private async Task SetHistory(string value)
    {
        history.RemoveAll(q => q == value);   
        history.Insert(0, value);

        if (history.Count > 10)
        {
            history = history.Take(10).ToList();
        }

        await localStorage.SetItemAsync(HistoryLocalStorageKey, history);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        //Make sure editor is loaded. Ugly, but it will thow exception if using @ref or setting it directly in this method
        _= Task.Run(async() => { await Task.Delay(1000); this.editor = editor; });

        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "javascript",
            Placeholder = "Type your query here",
        };
    }

    private async Task RunHistoryQuery(string query)
    {
        if (editor is not null)
        {
            await editor.SetValue(query);
            isRunDisabled = false;
            await RunQuery();
        }
    }
}
