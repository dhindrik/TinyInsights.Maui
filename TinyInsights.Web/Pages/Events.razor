@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
@inject DialogService DialogService

@if (isLoading)
{
    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenDatePicker @bind-Value="@from" @bind-Value:after="DateTimeFilterChanged" ShowTime="true" Placeholder="From" HoursStep="1" MinutesStep="5" SecondsStep="10" Min="min" Max="to" />
        <RadzenDatePicker @bind-Value="@to" @bind-Value:after="DateTimeFilterChanged" ShowTime="true" Placeholder="To" HoursStep="1" MinutesStep="5" SecondsStep="10" Min="from" Max="max" />
    </RadzenStack>
    <RadzenDataGrid Data="events" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn TItem="EventItem" Width="100px" Title="Event type" Property="@nameof(EventItem.EventType)">
                <Template>
                    <RadzenIcon Icon="@GetIcon(context.EventType)" title="@GetName(context.EventType)" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="EventItem" Title="Timestamp" Width="200px" Property="@nameof(EventItem.Timestamp)" />
            <RadzenDataGridColumn TItem="EventItem" Title="Name" Property="@nameof(EventItem.Name)" />
            <RadzenDataGridColumn TItem="EventItem" Width="100px">
                <Template>
                    <RadzenButton Icon="description" Click="@(async (args) => await ShowAllProperties(context))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    [Parameter]
    public required string UserId { get; set; }
    [Parameter]
    public required DateTime? Timestamp { get; set; }

    private bool isLoading = true;
    private List<EventItem> events = new();
    private List<EventItem> allEvents = new();

    private DateTime from;
    private DateTime to;
    private DateTime max;
    private DateTime min;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            if (Timestamp.HasValue)
            {
                events = await Service.GetEventsByUser(UserId, Timestamp.Value);
            }
            else
            {
                events = await Service.GetEventsByUser(UserId, GlobalFilter);               
            }

            allEvents = events;

            from = events.Min(x => x.Timestamp);
            to = events.Max(x => x.Timestamp);
            min = from;
            max = to;
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }

        isLoading = false;
    }

    private void DateTimeFilterChanged()
    {
        events = events.Where(x => x.Timestamp >= from && x.Timestamp <= to).ToList();
    
    }

    private async Task ShowAllProperties(EventItem item)
    {
        await DialogService.OpenAsync<AllProperties>($"All properties",
            new Dictionary<string, object>() { { "Properties", item.Data } },
            new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    private string GetIcon(EventType eventType) => eventType switch
    {
        EventType.CustomEvent => "touch_app",
        EventType.PageView => "visibility",
        EventType.Crash => "dangerous",
        EventType.Error => "error",
        EventType.Dependency => "file_download",
        _ => string.Empty
    };

    private string GetName(EventType eventType) => eventType switch
    {
        EventType.CustomEvent => "Custom event",
        EventType.PageView => "Page view",
        EventType.Crash => "Crash",
        EventType.Error => "Error",
        EventType.Dependency => "Dependency",
        _ => string.Empty
    };

}