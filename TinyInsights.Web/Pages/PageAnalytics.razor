@page "/analytics/page"
@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.End">
        <GlobalFilters />
    </RadzenRow>
    <RadzenCard>
        <RadzenStack>
            <h2>Page views per day</h2>
            @if (isLoadingPageViews)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            }
            else
            {
                <RadzenChart>
                    <RadzenLegend Visible="false"/>
                    <RadzenLineSeries Data="@pageViewsPerDay" CategoryProperty="Date" ValueProperty="Count">
                        <RadzenMarkers MarkerType="MarkerType.Circle"/>
                        <RadzenSeriesDataLabels/>
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
                </RadzenChart>
            }
        </RadzenStack>
    </RadzenCard>
    <RadzenCard>
        <RadzenStack>
            <h2>Page views</h2>

            @if (isLoadingList)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            }
            else
            {
            <RadzenDataGrid Data="pageViews">
                <Columns>
                    <RadzenDataGridColumn TItem="CountPerKey" Title="Identifier" Property="@nameof(CountPerKey.Key)" />
                    <RadzenDataGridColumn TItem="CountPerKey" Title="Views" Property="@nameof(CountPerKey.Count)" Width="100px" />
                </Columns>
            </RadzenDataGrid>
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    [CascadingParameter]
    public GlobalFilter GlobalFilter  {get;set;}

    private bool isLoadingPageViews, isLoadingList = true;
    private List<CountPerDay> pageViewsPerDay = new();
    private List<CountPerKey> pageViews = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var graphTask = LoadGraph();
            var listTask = LoadList();

            await Task.WhenAll(graphTask, listTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task LoadGraph()
    {
        isLoadingPageViews = true;
        
        var result = await Service.GetPageViewsPerDay(GlobalFilter);
        
        var date = DateOnly.FromDateTime(DateTime.Now).AddDays(-GlobalFilter.NumberOfDays);
        var days = new List<CountPerDay>();
        
        for (int i = 0; i <= GlobalFilter.NumberOfDays; i++)
        {
            var currentDate = date.AddDays(i);
            var day = result.SingleOrDefault(x => x.Date == currentDate);

            var count = day?.Count ?? 0;
 
            days.Add(new CountPerDay(currentDate, count));
        }

        pageViewsPerDay = days;
        isLoadingPageViews = false;

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadList()
    {
        isLoadingList = true;

        var result = await Service.GetPageViewsGrouped(GlobalFilter);

        pageViews = result.OrderByDescending(x => x.Count).ToList();
        
        isLoadingList = false;
        
        await InvokeAsync(StateHasChanged);
    }
}