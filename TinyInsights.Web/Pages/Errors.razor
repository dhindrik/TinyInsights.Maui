@page "/diagnostics/{Type}"

@using TinyInsights.Web.Services

@inherits TinyInsightsComponentBase

@inject IInsightsService Service
@inject TooltipService tooltipService

<RadzenStack Gap="20">
    <RadzenRow JustifyContent="JustifyContent.End">
        <GlobalFilters />
    </RadzenRow>

    @if(!isCrash)
    {
        <RadzenRow JustifyContent="JustifyContent.Start">
            <Badge IsBadgeVisible="@(selectedSeverities.Any(x => x != All))">
                <RadzenButton Icon="filter_alt" Click="@(() => showSeverityFilter = !showSeverityFilter)" MouseEnter="ShowFilterTooltip"></RadzenButton>
            </Badge>
        </RadzenRow>
    }

    @if (showSeverityFilter)
    {
        <RadzenCard>
            @if (severities.Count > 0)
            {
                <h2>Error filter</h2>
                <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center">
                    <RadzenDropDown @bind-Value="selectedSeverities" @bind-Value:after="SelectedSeveritiesChanged" Data="severities" Multiple="true" Chips="true" />
                </RadzenRow>
            }
        </RadzenCard>
    }

    <RadzenCard>
        <RadzenStack>
            <h2>@perDayHeader</h2>
            @if (isLoadingGraph)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            }
            else
            {
                <RadzenChart>
                    <RadzenLegend Visible="false"/>
                    <RadzenLineSeries Data="@errorsPerDays" CategoryProperty="Date" ValueProperty="Count">
                        <RadzenMarkers MarkerType="MarkerType.Circle"/>
                        <RadzenSeriesDataLabels/>
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Visible="false"></RadzenCategoryAxis>
                </RadzenChart>
            }
        </RadzenStack>
    </RadzenCard>

    <RadzenCard>
        <RadzenStack>
            <h2>@listHeader</h2>

            @if (isLoadingList)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            }
            else if(crashes is not null)
            {
                <RadzenDataGrid Data="crashes" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="CrashItem" Title="Identifier" Property="@nameof(CrashItem.Key)" />
                        <RadzenDataGridColumn TItem="CrashItem" Title="Count" Property="@nameof(CrashItem.Count)" Width="100px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="CrashItem" Title="Affected users" Property="@nameof(CrashItem.UsersAffected)" Width="200px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="CrashItem" Title="Last affected version" Property="@nameof(CrashItem.LatestAppVersion)" Width="200px" />
                        <RadzenDataGridColumn TItem="CrashItem" Title="Last report" Property="@nameof(CrashItem.LastReport)" Width="200px" />
                        <RadzenDataGridColumn TItem="CrashItem" Width="100px" TextAlign="TextAlign.End">
                            <Template>
                                <a href="@($"/diagnostics/{Type}/details/{context.Key}")">
                                    <RadzenIcon Icon="arrow_forward"/>
                                </a>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else if (errors is not null)
            {
                <RadzenDataGrid Data="errors" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="ErrorCount" Title="Identifier" Property="@nameof(ErrorCount.Key)" />
                        <RadzenDataGridColumn TItem="ErrorCount" Title="Severity" Property="@nameof(ErrorCount.ErrorSeverity)" Width="200px" />
                        <RadzenDataGridColumn TItem="ErrorCount" Title="Count" Property="@nameof(ErrorCount.Count)" Width="100px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="ErrorCount" Width="100px" TextAlign="TextAlign.End">
                            <Template>
                                <a href="@($"/diagnostics/{Type}/details/{context.ErrorSeverity}/{context.Key}")">
                                    <RadzenIcon Icon="arrow_forward" />
                                </a>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>
@code {

    [Parameter]
    public string Type { get; set; }

    private List<CountPerDay> errorsPerDays = new();
    private List<CrashItem>? crashes;
    private List<ErrorCount>? errors;
    private bool isLoadingGraph, isLoadingList = true;

    private const string All = "All";
    private List<string> selectedSeverities = [];
    private readonly List<string> severities = [All,"Default", "Error", "Warning"];
    private bool showSeverityFilter;

    private bool isCrash;
    private string perDayHeader, listHeader = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        crashes = null;
        errors = null;

        if (Type == "crashes")
        {
            isCrash = true;
            perDayHeader = "Crashes per day";
            listHeader = "Crashes";
        }
        else
        {
            isCrash = false;
            perDayHeader = "Errors per day";
            listHeader = "Errors";
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var graphTask = LoadGraph();
            var listTask = LoadList();

            await Task.WhenAll(graphTask, listTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task LoadGraph()
    {
        isLoadingGraph = true;

        List<CountPerDay> result;

        if (isCrash)
        {
            result = await Service.GetCrashesPerDay(GlobalFilter);
        }
        else
        {
            var filter = selectedSeverities.Where(x => x != All).ToList();

            result = await Service.GetErrorsPerDay(GlobalFilter, filter);
        }

        var date = DateOnly.FromDateTime(DateTime.Now).AddDays(-GlobalFilter.NumberOfDays);
        var days = new List<CountPerDay>();

        for (int i = 1; i <= GlobalFilter.NumberOfDays; i++)
        {
            var currentDate = date.AddDays(i);
            var day = result.SingleOrDefault(x => x.Date == currentDate);

            var count = day?.Count ?? 0;

            days.Add(new CountPerDay(currentDate, count));
        }

        errorsPerDays = days;

        isLoadingGraph = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadList()
    {
        isLoadingList = true;

        if (isCrash)
        {
            var crashResult = await Service.GetCrashesGrouped(GlobalFilter);
            crashes = crashResult.OrderByDescending(x => x.Count).ToList();
        }
        else 
        {
            var filter = selectedSeverities.Where(x => x != All).ToList();

            var errorResult = await Service.GetErrorsGrouped(GlobalFilter, filter);
            errors = errorResult.OrderByDescending(x => x.Count).ToList();
        }



        isLoadingList = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectedSeveritiesChanged()
    {
        try
        {
            if (selectedSeverities.Count > 1)
            {
                selectedSeverities.Remove(All);
            }

            if (selectedSeverities.Count == severities.Count || selectedSeverities.Count == 0)
            {
                selectedSeverities.Clear();
                selectedSeverities.Add(All);
            }

            await LoadData();
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private record DayFilterItem(string Text, int Value);

    private void ShowFilterTooltip(ElementReference elementReference) => tooltipService.Open(elementReference, showSeverityFilter ? "<b>Hide filters</b>" : "<b>Show all filters</b>", new TooltipOptions() { Style = "background: #757575; color: white;" });
}