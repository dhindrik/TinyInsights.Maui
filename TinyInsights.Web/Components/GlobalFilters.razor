@inherits TinyInsightsComponentBase
@inject IInsightsService Service
@inject TooltipService tooltipService

<div>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="20" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
        <Badge IsBadgeVisible="hasActiveFilters">
            <RadzenButton Icon="filter_alt" Click="@(() => showAllFilters = !showAllFilters)" MouseEnter="ShowFilterTooltip" />
        </Badge>
        @if(showAllFilters)
        {
            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                <RadzenTextBox @bind-Value="@GlobalFilter.TextFilter" Placeholder="Text filter" MouseEnter="ShowTooltip" />
                <RadzenButton Text="Apply text filter" Click="@GlobalFilter.ApplyTextFilter" />
            </RadzenStack>  
        }

        <RadzenDropDown @bind-Value="@GlobalFilter.OperatingSystem" Data="operatingSystemFilter" TextProperty="Text"
        ValueProperty="Value" />                        
        <RadzenDropDown @bind-Value="@GlobalFilter.AppVersions" Data="appVersions" Multiple="true" Chips="true" />
        <RadzenDropDown @bind-Value="@GlobalFilter.NumberOfDays" Data="dayFilter" TextProperty="Text" ValueProperty="Value" />
    </RadzenStack>
</div>
@code {
    private bool showAllFilters;
    private bool hasActiveFilters;

    private List<DayFilterItem> dayFilter = new()
{
new("3 days", 3),
new("7 days", 7),
new("14 days", 14),
new("30 days", 30),
};

    private List<OperatingSystem> operatingSystemFilter = new List<OperatingSystem>()
{
new ("All operating systems", "all"),
new("iOS", "iOS"),
new("Android", "Android"),
new("Windows", "WinUI"),
new("MacOS", "MacOS")
};

    private List<string> appVersions = new List<string>()
{
GlobalFilter.AppVersionsDefaultValue
};
    protected override async Task OnParametersSetAsync()
    {
        if (appVersions.Count == 1)
        {
            var versions = await Service.GetUniqueAppVersions();

            versions = versions.OrderByDescending(x => x.Split('(')[1].Trim(')')).ToList();

            appVersions.AddRange(versions);

            GlobalFilter.AllAppVersions = versions;

            hasActiveFilters = !string.IsNullOrWhiteSpace(GlobalFilter.TextFilter);
        }
    }

    private void ShowTooltip(ElementReference elementReference) => tooltipService.Open(elementReference, "Add a simple KQL filter like <i>name == cloud_RoleName == 'Mobile.App'</i>. Do not include where, it will break the query. <b>Also remember, this is a global filter and some columns are specific to a certain view.</b>", new TooltipOptions(){ Style = "background: #757575; color: white;"});
    private void ShowFilterTooltip(ElementReference elementReference) => tooltipService.Open(elementReference, showAllFilters ? "<b>Hide filters</b>" : "<b>Show all filters</b>", new TooltipOptions(){ Style = "background: #757575; color: white;"});
    private record DayFilterItem(string Text, int Value);

    private record OperatingSystem(string Text, string Value);
}